Class EquestriaDoomWeapon : Weapon abstract
{
	double previousangle;
	double previouspitch;
	Default
	{
		Weapon.Kickback 100;
		Weapon.BobStyle "Smooth";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5; Weapon.BobRangeY 0.75;
		
		+ForceXYBillBoard
		+CASTSPRITESHADOW
	}

	States
	{
	
	GotoReady:
		TNT1 A 0 A_Jump(256, "Ready");
		Wait;
		
	DeathCheck:
		TNT1 A 0 offset(0, 32)
		{
			A_OverlayFlags(1, PSPF_PLAYERTRANSLATED | PSPF_ADDBOB, 1);
			A_ClearOverlays(2, 1000, false);
			A_OverlayScale(PSP_WEAPON, 1, 1);
			A_ZoomFactor(1.0);
		}
		TNT1 A 0 A_JumpIfInventory("Death_Extreme", 1, "Extreme.Death");
		TNT1 A 0 A_JumpIfInventory("Death_Explosion", 1, "Explosion.Death");
		Goto Normal.Death;
	
	Swimming:
		DTH2 DC 16
		{
			A_WeaponReady(WRF_NOFIRE);
			
			if(waterlevel <= 0)
			{	A_WeaponReady();
				return ResolveState("Deselect"); }
			
			return state(null);
		}
		Loop;
		
	Normal.Death:
		DTH1 JIHGF 2;
		DTH1 ABCDE 4;
		TNT1 A 0 A_Overlay(2, "CameraRoll");
		DTH1 FHGIJKLM 2;
		DTH1 N -1;
		Stop;
		
	CameraRoll:
		TNT1 AAAA 1
		{
			A_SetRoll(roll + 1, SPF_INTERPOLATE);
			ThrustThing(angle * 256 / 360 + 150, 1, 0, 0);
		}
		TNT1 AAAAAA 1 A_SetRoll(roll + 2, SPF_INTERPOLATE);
		TNT1 AAAAAA 1 A_SetRoll(roll + 3, SPF_INTERPOLATE);
		TNT1 AA 1 { A_SetRoll(roll - 2, SPF_INTERPOLATE); A_SetPitch(pitch + 6, SPF_INTERPOLATE);}
		TNT1 AA 1 { A_SetRoll(roll + 2, SPF_INTERPOLATE); A_SetPitch(pitch - 6, SPF_INTERPOLATE); }
		TNT1 AA 1 { A_SetRoll(roll - 1, SPF_INTERPOLATE); A_SetPitch(pitch + 4, SPF_INTERPOLATE); }
		TNT1 AA 1 { A_SetRoll(roll + 1, SPF_INTERPOLATE); A_SetPitch(pitch - 4, SPF_INTERPOLATE); }
		TNT1 A 1 A_JumpIf(health >= 1, "Resurrect");
		Wait;
		
	Explosion.Death:
		DTH2 A 0 A_TakeInventory("Death_Explosion");
		DTH2 ABC 1 A_SetPitch(pitch - 30, SPF_INTERPOLATE);
		DTH2 D 1 A_CheckFloor(1);
		Wait;
		DTH2 F 0 A_Overlay(2, "CameraRoll2");
		DTH2 EFGHI 2;
		DTH2 J -1;
		Stop;
	
	CameraRoll2:
		TNT1 A 0 { ThrustThingZ(0, 40, 0, 1); ThrustThing(angle * 256 / 360 + randompick(90, 180),1,0,0); }
		TNT1 AA 1 A_SetPitch(pitch - 45, SPF_INTERPOLATE);
		TNT1 AA 1 { A_SetRoll(roll - 2, SPF_INTERPOLATE);	A_SetPitch(pitch + 10, SPF_INTERPOLATE); }
		
		TNT1 A 1 A_CheckFloor(1);
		Wait;
		
		TNT1 A 0 ThrustThingZ(0, 10, 0, 1);
		TNT1 AA 1 {	A_SetRoll(roll - 4, SPF_INTERPOLATE);	A_SetPitch(pitch + 10, SPF_INTERPOLATE); }
		
		TNT1 A 1 A_CheckFloor(1);
		Wait;
		
		TNT1 A 0 ThrustThingZ(0, 5, 0, 1);
		TNT1 AA 1 {	A_SetRoll(roll + 8, SPF_INTERPOLATE);	A_SetPitch(pitch - 10, SPF_INTERPOLATE); }
		TNT1 AA 1 { A_SetRoll(roll - 16, SPF_INTERPOLATE);	A_SetPitch(pitch + 10, SPF_INTERPOLATE); }
		TNT1 AA 1 { A_SetRoll(roll + 16, SPF_INTERPOLATE);	A_SetPitch(pitch - 6, SPF_INTERPOLATE); }
		TNT1 AA 1 {	A_SetRoll(roll + 2, SPF_INTERPOLATE);	A_SetPitch(pitch + 6, SPF_INTERPOLATE); }
		
		TNT1 A 1 A_JumpIf(health >= 1, "Resurrect");
		Wait;
		
	Extreme.Death:
		TNT1 A 0 A_TakeInventory("Death_Extreme");
		Stop;
	
	Resurrect:
		TNT1 A 0
		{
			A_OverlayFlags(1, PSPF_PLAYERTRANSLATED, 0);
			A_SetPitch(0, SPF_INTERPOLATE);
			A_SetRoll(0, SPF_INTERPOLATE);
			A_ZoomFactor(1);
		}
		Stop;
////Deaths

  /*ToDo	ToDo	ToDo
	Death.Common:
		
	
	Death.Lava:
	
	Death.Nuke:
	
	Death.Fire:
	
	ToDo	ToDo	ToDo*/

////Kicks

	AltFire:
		TNT1 A 3
		{
			if (Vel.Z < 0 || Vel.Z > 0)
				return ResolveState("Kick.Air");
			
			A_StartSound ("skeleton/swing");
			A_AlertMonsters (250, 0);
			A_Overlay(-3, "Kick.Overlay");
			A_Overlay(3, "Overlay.Aside");

			if (!CheckInventory("PowerStrength", 1))
			{
				SetPlayerProperty(0, 1, PROP_FROZEN);
				A_Recoil(-1);
			}
			else
				A_Recoil(-2);
			
			return state(null);
		}
		TNT1 A 6
		{
			A_SprayDecal("HorseShoe", 64, (0,0,45));
			
			if (!CheckInventory("PowerStrength", 1))
			{
				A_CustomPunch(2 * Random(1,10), true, CPF_NOTURN, "KickPuff", 64, 0, 0, "BasicArmorBonus", "*fist");
				SetPlayerProperty(0, 0, 0);
			}
			else
				A_CustomPunch(20 * Random(1, 10), TRUE, 0, "BerserkPuff", 64, 0, 0, "BasicArmorBonus", "skeleton/melee");
		}
		TNT1 AAAAA 2;
		Goto GotoReady;
		
	Kick.Air:
		TNT1 A 0
		{
			SetPlayerProperty(0, 1, PROP_FROZEN);
			A_StartSound ("skeleton/swing");
			A_AlertMonsters (500, 0);
			A_Overlay(-3, "Kick.Overlay");
			A_Overlay(3, "Overlay.Aside");
			
			A_Recoil(-6);
		}
		
		TNT1 AAAAA 1;
        TNT1 A 2
		{
			if (!CheckInventory("PowerStrength", 1))
				A_CustomPunch(3*Random(1,10), true, CPF_NOTURN, "KickPuff", 85, 0, 0, "BasicArmorBonus", "*fist");
			else
			{
				A_CustomPunch(25 * Random(1, 10), TRUE, 0, "BerserkPuff", 85, 0, 0, "BasicArmorBonus", "skeleton/melee");
			}
			A_AlertMonsters (500, 0);
		}
		TNT1 AAAAA 2;
		
		TNT1 A 0 SetPlayerProperty(0, 0, 0);
		Goto GotoReady;
		
	Kick.Overlay:
		TNT1 A 0 A_OverlayFlags(-3, PSPF_PLAYERTRANSLATED, true);
		
		KICK BCD 1
		{
			A_OverlayScale(-3, 1, 1, WOF_INTERPOLATE);
			
			if(GetCVar("KickCamera"))
			{
				A_SetPitch(pitch - 2, SPF_INTERPOLATE);
				A_SetRoll(roll - 1, SPF_INTERPOLATE);
			}
		}
		KICK H 2 { A_OverlayScale(-3, 1, 1, WOF_INTERPOLATE); if(GetCVar("KickCamera")) { A_ZoomFactor(0.96); } }
		KICK H 2 { if(GetCVar("KickCamera")) A_ZoomFactor(0.97); }
		KICK H 2 { if(GetCVar("KickCamera")) A_ZoomFactor(0.98); }
		KICK F 1 { if(GetCVar("KickCamera")) A_ZoomFactor(0.99); }
		KICK F 1 { if(GetCVar("KickCamera")) A_ZoomFactor(1); }
		KICK EEDDCC 1
		{
			A_OverlayScale(-3, 1, 1, WOF_INTERPOLATE);
			
			if(GetCVar("KickCamera"))
			{
				A_SetPitch(pitch + 1, SPF_INTERPOLATE);
				A_SetRoll(roll + 0.5, SPF_INTERPOLATE);
			}
		}
		KICK B 2 { A_OverlayScale(-3, 1, 1, WOF_INTERPOLATE); A_SetRoll(0); }
		Stop;
		
	Overlay.Aside:
		TNT1 A 0 A_OverlayFlags(3, PSPF_ADDBOB, true);
		TNT1 A 0 A_OverlayPivotAlign(3, PSPA_RIGHT, PSPA_BOTTOM);
		
		SHTG AEE 1
		{
			A_OverlayOffset(3, -35, 5, WOF_INTERPOLATE );
			A_OverlayRotate(3, 4, WOF_ADD);
		}
		SHTG FF 1
		{
			A_OverlayOffset(3, -30, 10, WOF_INTERPOLATE );
			A_OverlayRotate(3, 8, WOF_ADD);
		}
		SHTG F 10;
		SHTG FEE 1 
		{
			A_OverlayOffset(3, 0, 0, WOF_INTERPOLATE );
			A_OverlayRotate(3, -8, WOF_ADD);
		}
		SHTG A 1;
		Stop;
	
	//////					Aura						//////
	
	Aura.Setup:
		TNT1 A 0	
		{	
			A_OverlayFlags(10, PSPF_RENDERSTYLE | PSPF_ALPHA | PSPF_ADDWEAPON | PSPF_ADDWEAPON | PSPF_PLAYERTRANSLATED, 1);
			A_OverlayRenderStyle(10, STYLE_Add);
		}
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);

		//Sorry
		TNT1 A 2 A_OverlayAlpha(10, 0.875);
		TNT1 A 2 A_OverlayAlpha(10, 0.85);
		TNT1 A 2 A_OverlayAlpha(10, 0.825);
		TNT1 A 4 A_OverlayAlpha(10, 0.8);
		TNT1 A 2 A_OverlayAlpha(10, 0.75);
		TNT1 A 2 A_OverlayAlpha(10, 0.7);
		TNT1 A 2 A_OverlayAlpha(10, 0.65);
		TNT1 A 2 A_OverlayAlpha(10, 0.6);
		TNT1 A 2 A_OverlayAlpha(10, 0.55);
		TNT1 A 2 A_OverlayAlpha(10, 0.5);
		TNT1 A 2 A_OverlayAlpha(10, 0.45);
		TNT1 A 4 A_OverlayAlpha(10, 0.4);
		TNT1 A 2 A_OverlayAlpha(10, 0.375);
		TNT1 A 2 A_OverlayAlpha(10, 0.35);
		TNT1 A 2 A_OverlayAlpha(10, 0.325);
		TNT1 A 8 A_OverlayAlpha(10, 0.3);
		TNT1 A 2 A_OverlayAlpha(10, 0.325);
		TNT1 A 2 A_OverlayAlpha(10, 0.35);
		TNT1 A 2 A_OverlayAlpha(10, 0.375);
		TNT1 A 4 A_OverlayAlpha(10, 0.4);
		TNT1 A 2 A_OverlayAlpha(10, 0.45);
		TNT1 A 2 A_OverlayAlpha(10, 0.5);
		TNT1 A 2 A_OverlayAlpha(10, 0.55);
		TNT1 A 2 A_OverlayAlpha(10, 0.6);
		TNT1 A 2 A_OverlayAlpha(10, 0.65);
		TNT1 A 2 A_OverlayAlpha(10, 0.7);
		TNT1 A 2 A_OverlayAlpha(10, 0.75);
		TNT1 A 4 A_OverlayAlpha(10, 0.8);
		TNT1 A 2 A_OverlayAlpha(10, 0.825);
		TNT1 A 2 A_OverlayAlpha(10, 0.85);
		TNT1 A 2 A_OverlayAlpha(10, 0.875);
		TNT1 A 8 A_OverlayAlpha(10, 0.9);
		Goto Aura.Setup+2;
	}
}

Class BulletTracer : FastProjectile
{
	Default
	{
		+DONTSPLASH
		+NOEXTREMEDEATH
		+NOBLOOD
		+NOPAIN
		+Bright
		
		Speed 256; FastSpeed 512;
		Damage 0;
		RenderStyle "Add";
		Alpha 0.75;
		
		Height 4; Radius 2;
	}
	override void BeginPlay()
	{
		if(GetCVar("CV_BULLETTRACER")==0)
			Destroy();
			
		if(GetCVar("CV_SLOWTRACER"))
		{
			speed = 128;
			
			//if(GetCVar("CV_TESTING"))
			//	A_AttachLight("FiringLight", DynamicLight.PointLight, "Orange", 32, 32,
			//			DYNAMICLIGHT.LF_SPOT, (0,0,0),0,50,150,pitch);
		}
			
		Super.BeginPlay();
	}
	States
	{
	Spawn:
		TNT1 A 2;
		PUFF A 1;
		Wait;
		
	Death:
		TNT1 A 0;
		Stop;
	}
}

Class ShotgunTracer : BulletTracer
{
	Default { Translation "164:167=232:235", "160:163=16:31", "224:231=168:175"; }
}

Class Equestria_CutsceneWeapons : EquestriaDoomWeapon
{
	Default
	{
		Weapon.BobStyle "Smooth";
		Weapon.BobSpeed 2.0;
		Weapon.BobRangeX 0.0; Weapon.BobRangeY 1.0;
		
		-ForceXYBillBoard
		-CASTSPRITESHADOW
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.NOAUTOSWITCHTO
		+WEAPON.NOALERT
	}
}
Class Equestria_Swimming : Equestria_CutsceneWeapons
{
	States
	{
	Select:
		DTH2 ABCCDDD 1 A_Raise();
		Wait;
	Deselect:
		DTH2 DDDCCBA 1 A_Lower();
		TNT1 A 0 A_GiveInventory("OutWater", 1);
		TNT1 A 1;
		Wait;
	Fire:
		#### # 0;
	Ready:
		DTH2 DC 16
		{
			A_WeaponReady(WRF_NOFIRE);
			
			if(waterlevel <= 0)
			{	A_WeaponReady();
				return ResolveState("Deselect"); }
			
			return state(null);
		}
		Loop;
	}
}

Class Equestria_Sleeping : Equestria_CutsceneWeapons
{
	States
	{
	Select:
		DTH2 J 1 A_Raise();
		Wait;
	Deselect:
		#### # 1 A_Lower();
		Wait;
	Fire:
		#### # 0;
	Ready:
		DTH2 J 0
		{
			invoker.previousangle = angle;
			invoker.previouspitch = pitch;
		}
		DTH2 J 1
		{
			A_WeaponReady(WRF_NOSWITCH | WRF_NOFIRE);
			
			if (pitch > 10) A_SetPitch(10,SPF_INTERPOLATE);
			else if (pitch < -60) A_SetPitch(-60,SPF_INTERPOLATE);
			
			if (angle > 0) A_SetAngle(0,SPF_INTERPOLATE);
			else if (angle < -180) A_SetAngle(-180,SPF_INTERPOLATE);
			
			if(vel.x > 0 || vel.y > 0)
			{
				A_WeaponReady();
				A_GiveInventory("Equestria_Walking",1);
				A_SelectWeapon("Equestria_Walking");
			}
			A_OverlayOffset(1,angle - invoker.previousangle, 32 + (-pitch) - (-invoker.previouspitch), WOF_INTERPOLATE);
		}
		Wait;
	}
}

Class Equestria_Walking : EquestriaDoomWeapon
{
	States
	{
	Select:
		TNT1 A 1 A_Raise();
		Wait;
	Deselect:
		#### # 1 A_Lower();
		Wait;
	Fire:
		#### # 0;
		Goto AltFire;
	Ready:
		TNT1 A 1
		{
			A_WeaponReady();
			A_TakeInventory("Equestria_Sleeping", 999);
		}
		Loop;
	}
}
Class Test_DeathCommon : EquestriaDoomWeapon
{
	States
	{
	Deselect:
		TNT1 A 1 A_Lower();
		Wait;
	Select:
		TNT1 A 1 A_Raise();
		Wait;
	Ready:
		DTH1 A -1 A_WeaponReady();
		Loop;
	Fire:
		DTH1 ABCDE random(4, 8);
		Loop;
	}	
}