Class EquestriaRocketLauncher : EquestriaDoomWeapon replaces RocketLauncher
{
	Default
	{
		//$Title Rocket Launcher
		Tag "$TAG_ROCKETLAUNCHER";
		Weapon.SelectionOrder 7;
		
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobRangeX 0.2;
		
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "RocketAmmo";
		
		+WEAPON.NOAUTOFIRE
		
		Inventory.PickupMessage "$GOTLAUNCHER";
		Inventory.PickupSound "pickup/rocklauncher";
	}
	States
	{
	Spawn:
		LAUN A -1 NoDelay { bSPRITEFLIP = RandomPick(0,1); }
		Stop;
	
	Select:
		MISG A 0 A_SetCrossHair(13);
		
		MISG A 1 A_Raise();
		Wait;
	
	Deselect:
		TNT1 A 0 {
			if(health <= 0)
				return ResolveState("DeathCheck");
			return ResolveState(null);
		}
		
		MISG A 1 A_Lower();
		Wait;
	
	Ready:
		MISG A 1 A_WeaponReady();
		Loop;
	
	Fire:
		MISG A 4 A_GunFlash();
		MISG B 4;
		
		MISG B 6
		{
			A_FireProjectile("EquestriaRocket", 0, 1, 0, -14);
			A_WeaponOffset(0, random(3, 10), WOF_ADD);
			
			if (GetCVAR("CamRecoilToggle") == true)
				A_Overlay(2, "CamRecoil");
		}
		MISG A 6 A_WeaponOffset(0, 32, WOF_INTERPOLATE);
		MISG B 0 A_ReFire();
		Goto Ready;
	
	Flash:
		MISF A 4 Bright { if(GetCVar("MuzzleStyle")) { A_OverlayFlags(1000, PSPF_RENDERSTYLE | PSPF_ALPHA, 1); A_OverlayRenderStyle(1000, STYLE_Translucent); A_OverlayAlpha(1000, 0.75); }}
		MISF B 3 Bright;
		MISF C 3;
		MISF D 2;
		Goto LightDone;
	
	CamRecoil:		
		TNT1 B 1 A_ZoomFactor(0.995, ZOOM_NOSCALETURNING);
		TNT1 A 1 A_SetPitch(pitch-0.9, SPF_INTERPOLATE);
		TNT1 B 1 A_ZoomFactor(1, ZOOM_NOSCALETURNING);
		TNT1 C 1 A_WeaponOffset(0, 32, WOF_KEEPX | WOF_INTERPOLATE);
		TNT1 AA 1 A_SetPitch(pitch+0.25, SPF_INTERPOLATE);
		TNT1 AA 1 A_SetPitch(pitch+0.15, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(pitch+0.1, SPF_INTERPOLATE);
		Stop;
	}
}

Class EquestriaRocket : Actor replaces Rocket
{
	Default
	{
		Projectile;

		Radius 5; Height 10;
		
		Speed 20;
		Damage 20;
		
		+RollSprite +RollCenter
		+ForceXYBillBoard
		+CastSpriteShadow
		+BloodSplatter
		+ZDOOMTRANS
		
		Decal "Scorch";
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Obituary "$OB_MPROCKET";
	}
	
	static const string waterfloor[] =	{ "FWATER1","FWATER2","FWATER3","FWATER4" };
	static const string slimefloor[] =
	{ "SLIME01","SLIME02","SLIME03","SLIME04", "SLIME05","SLIME06","SLIME07","SLIME08", "SLIME17", "SLIME18", "SLIME19", "SLIME20" };
	static const string bloodfloor[] =	{ "BLOOD1","BLOOD2","BLOOD3" };
	static const string nukagefloor[] =	{ "NUKAGE1","NUKAGE2","NUKAGE3" };
	static const string lavafloor[] =	{ "LAVA1" ,"LAVA2","LAVA3","LAVA4" };
	
	States
	{
	Spawn:
		MISC BCD 2 Bright NoDelay Light("ROCKET") { if(GetCVar("CV_MISSILEMODEL")==1) return ResolveState("Spawn2"); return state(null); }
		
		MISC ABCD 2 Bright Light("ROCKET") { A_SpawnItem("EquestriaRocketSmoke",0,height / 2); A_SpawnItem("EquestriaRocketFire",0,-2); }
		Goto Spawn+1;
	
	Spawn2:
		TNT1 A 4 Light("ROCKET");
		MIS2 A 2 Bright Light("ROCKET");
		
		#### A 2 Bright Light("ROCKET") { A_SpawnItem("EquestriaRocketSmoke",0,height / 2); A_SpawnItem("EquestriaRocketFire",0,-2); }
		Wait;
		
	Death:
		TNT1 A 0{
			bCASTSPRITESHADOW = 0;
			A_SetRoll(0);
			if (abs(pos.z - GetZAt()) <= 1)
				return ResolveState("Death.Floor");
			for (int i = 0; i < 32; i++)
				A_SpawnProjectile("ExplosionSparkle", 0, 0, frandom(0, 360), CMF_AIMDIRECTION,frandom(0, 360));
	
			return state(null);
		}
	XDeath:
		MISL B 6 Bright
		{
			A_Explode(-1,-1, XF_HURTSOURCE, true, 0,0,10,"","Explosion");
			A_QuakeEx(4, 4, 4, 16, 0, 256, "", QF_SCALEDOWN, 0,0,0, 1);
			
			bCASTSPRITESHADOW = 0;
			A_SetRoll(0);
			for (int i = 0; i < 16; i++)
				A_SpawnProjectile("Smoke", 0, 0, frandom(0, 360), CMF_AIMDIRECTION,frandom(0, 360));
		}
		
		TNT1 AAAA 0 A_SpawnProjectile("SplashSmoke", random(-20, 20), random (-40, 40), frandom(0, 360), CMF_AIMDIRECTION, random(0, -90));

		MISL C 4 Bright;
		MISL D 1 A_FadeOut(0.1);
		Wait;
		
	Death.FLoor:
		MISL E 0
		{
			bool liquidfloor;
			
			string floorname = TexMan.GetName(floorpic);
			for (int i = 0; i < waterfloor.size(); i++)
			{
				if (floorname == waterfloor[i])
				{	liquidfloor = 1;
					for (int i = 0; i < 64; i++)
						A_SpawnItemEx("DEWaterSplashChunk", frandom(-16, 16),frandom(-16, 16),4, random(2, 8), random(2, 8), random(4, 16), frandom(0,360));
				}
			}
			for (int i = 0; i < slimefloor.size(); i++)
			{
				if (floorname == slimefloor[i])
				{	liquidfloor = 1;
					for (int i = 0; i < 32; i++)
						A_SpawnItemEx("DESlimeBrownChunk", frandom(-16, 16),frandom(-16, 16),4, random(2, 8), random(2, 8), random(4, 16), frandom(0,360));
				}
			}
			for (int i = 0; i < bloodfloor.size(); i++)
			{
				if (floorname == bloodfloor[i])
				{	liquidfloor = 1;
					for (int i = 0; i < 32; i++)
						A_SpawnItemEx("DEBloodChunk", frandom(-16, 16),frandom(-16, 16),4, random(2, 8), random(2, 8), random(4, 16), frandom(0,360));
				}
			}
			
			if (liquidfloor == 0)
				for (int i = 0; i < 16; i++)
					A_SpawnProjectile("ExplosionSparkle", frandom(0, 8),0, frandom(0, 360), CMF_AIMDIRECTION | CMF_BADPITCH, frandom(45, 95));
		}
		MISL E 4 Bright
		{
			A_Explode(-1,-1, XF_HURTSOURCE, true, 0,0,10,"","Explosion");
			A_QuakeEx(4, 4, 4, 16, 0, 200, "", QF_SCALEDOWN, 0,0,0, 1);
			
			bFORCEXYBILLBOARD = false;
			for (int i = 0; i < 16; i++)
				A_SpawnProjectile("Smoke",0,0, frandom(0, 360), CMF_AIMDIRECTION | CMF_BADPITCH, frandom(0, 90));
		}
		
		TNT1 AAAA 0 A_SpawnProjectile("SplashSmoke", random(-20, 20), random (-40, 40), frandom(0, 360), CMF_AIMDIRECTION, random(0, -90));

		MISL FGH 2 Bright;
		MISL HHI 1 A_FadeOut(0.1);
		Wait;
		
	BrainExplode:
		TNT1 AAAAAAAAAA 0 A_SpawnProjectile("ExplosionSparkle", 0, 0, random (0, 359), CMF_AIMDIRECTION, random (0, 359));
		TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("Smoke", 0, 0, random (0, 359), CMF_AIMDIRECTION, random (0, 359));

		MISL B 6 Bright
		{
			A_BrainExplode();
			A_QuakeEx(8, 8, 8, 16, 0, 1024, "", QF_SCALEDOWN, 0,0,0, 1);
		}
		
		TNT1 AAAA 0 A_SpawnProjectile("SplashSmoke", random(-20, 20), random (-40, 40), random (0, 359), CMF_AIMDIRECTION, random(0, -90));

		MISL C 4 Bright;
		MISL D 1 A_FadeOut(0.1);
		Wait;
	}
}

Class EquestriaRocketSmoke : Equestria_Trails replaces RocketSmokeTrail
{	Default
	{
		RenderStyle "Translucent"; Alpha 0.75;
		Speed 15;
		Scale 0.5;
	}
	States
	{
	Spawn:
		TNT1 A 2;
		RSMK A random(2,4)
		{
			bSPRITEFLIP = randompick(0, 1);
			A_SetRoll(frandom(0, 360));
		}
		RSMK A 2;
		RSMK AAAAAAAAAABBBBBBBBCCCCCCDDDD 1
		{
			A_FadeOut(0.02);
			A_SetScale(Scale.X + 0.025, Scale.Y + 0.025);
		}
		RSMK E 1 A_FadeOut(0.05);
		Wait;
	}
}

Class EquestriaRocketFire : EQ_FireBallTrail
{
	States
	{
	Spawn:
		TNT1 A 4;
		BAL1 CD 2 Bright A_FadeOut(0.125);
		BAL1 E 1 Bright A_FadeOut(0.1);
		Wait;
	}
}

Class ExplosionSparkle : PuffSparkles
{
	//int traildelay;
	
	Default
	{
		Height 4; Radius 2;
		Scale 1; Speed 12; Gravity 0.5;
		BounceType "Doom";
		BounceFactor 0.3;
	}
	States
	{
	Spawn:
		PUFF A -1;
		Stop;
		
	Death:
		PUFF A 1
		{
			A_SetScale(Scale.X - 0.025, Scale.Y - 0.025);
			If(Scale.X <= 0)
				Destroy();
		}
		Wait;
	}
	
	/*override void Tick()
	{
		traildelay++;
		
		if (GetCVar("DEBUG"))
			A_LogInt(traildelay);
			
		if (!isFrozen() && traildelay >= 8 && InStateSequence(CurState, ResolveState("Spawn")))
		{	
			traildelay = 0;
			
			A_SpawnItemEx("BarrelDebrisSmoke",0,0,0, frandom(-1,1),frandom(-1,1),frandom(-1,1));
		
			if (GetCVar("DEBUG"))
				A_Log("Reset Sparkle Trail");
		}
		Super.Tick();
	}*/
}