Class Death_Common : InvToken {}
Class Death_Fire : InvToken {}
Class Death_Explosion : InvToken {}
Class Death_Nukage : InvToken {}
Class Death_Lava : InvToken {}
Class Death_Extreme : InvToken {}
Class OutWater : InvToken {}

Class EquestriaDoomPlayer : DoomPlayer replaces DoomPlayer
{
	int deathtype;
	bool hud_disabled;
	
	Default
	{
		+CASTSPRITESHADOW
		+NOSKIN
		
		Player.Portrait "P_SHAINR";
		
		Player.DamageScreenColor "Red", 0.0;
		
		Player.ViewHeight 47; Player.AttackZOffset 19;
		
		Player.DisplayName "$MAINCHARACTER";
		
		Player.DamageScreenColor "Red";
		
		Player.StartItem "EquestriaPistol";
		Player.StartItem "Clip", 20;
		//Player.StartItem "Fist";
	  
		Player.WeaponSlot 1, "EquestriaChainsaw", "BerserkFist";
		Player.WeaponSlot 2, "EquestriaPistol";
		Player.WeaponSlot 3, "EquestriaShotgun", "EquestriaSuperShotgun";
		Player.WeaponSlot 4, "EquestriaRifle", "EquestriaChaingun";
		Player.WeaponSlot 5, "EquestriaRocketLauncher";
		Player.WeaponSlot 6, "EquestriaPlasmaGun";
		Player.WeaponSlot 7, "EquestriaBFG9K";
		
		/*Player.WeaponSlot 1, "EquestriaChainsaw", "BerserkFist";
		Player.WeaponSlot 2, "EquestriaPistol";
		Player.WeaponSlot 3, "EquestriaShotgun";
		Player.WeaponSlot 4, "EquestriaSuperShotgun";
		Player.WeaponSlot 5, "EquestriaRifle";
		Player.WeaponSlot 6, "EquestriaChaingun";
		Player.WeaponSlot 7, "EquestriaRocketLauncher";
		Player.WeaponSlot 8, "EquestriaPlasmaGun";
		Player.WeaponSlot 9, "EquestriaBFG9K";*/
	}
	
	override void Tick()
	{
		Super.Tick();
		if(waterlevel > 0 && !FindInventory("OutWater") && GetCVar("CV_TESTING"))
		{
			if(GetCVar("DEBUG")) A_Print("In Water");
			
			if(!CheckInventory("Equestria_Swimming", 1))
				GiveInventory("Equestria_Swimming", 1);
			
			A_SelectWeapon("Equestria_Swimming");
		}
		else if(CheckInventory("OutWater", 1))
			TakeInventory("Equestria_Swimming", 999);
			TakeInventory("OutWater", 999);
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		int dmg = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		if (dmg > 30)		A_QuakeEx(4,4,4,24,0,1,0,QF_RELATIVE | QF_SCALEDOWN, 2,2,2,0,0,4,4);
		else if (dmg > 20)	A_QuakeEx(3,3,1,16,0,1,0,QF_RELATIVE | QF_SCALEDOWN, 2,2,2,0,0,3,3);
		else if (dmg > 10)	A_QuakeEx(2,2,2,8,0,1,0,QF_RELATIVE | QF_SCALEDOWN, 1,1,1,0,0,2,2);
		else if (dmg > 1)	A_QuakeEx(1,1,1,4,0,1,0,QF_RELATIVE | QF_SCALEDOWN, 1,1,1,0,0,1,1);
		return dmg;
	}
	
	States
	{
	
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
	
	Death:
		PLAY H 10;
		PLAY I 10 A_PlayerScream();
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
		
	Death.Fire:
		TNT1 A 0 A_GiveInventory("Death_Fire", 1);
		Goto Death;
		
	Death.Nukage:
		TNT1 A 0 A_GiveInventory("Death_Nukage", 1);
		Goto Death;
	
	Death.Lava:
		TNT1 A 0 A_GiveInventory("Death_Lava", 1);
		Goto Death;
	
	Death.Unicorn:
		Goto Death.Explosion;
	Death.Explosion:
		PLAY H 10 A_GiveInventory("Death_Explosion", 1);
		PLAY I 10 A_PlayerScream();
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	
	XDeath:
		PLAY O 5
		{
			A_GiveInventory("Death_Extreme", 1);
			A_SkullPop("PopSkull");
			A_XScream();
			A_NoBlocking();
			
			if(GetCVar("CV_DEBRISTOGGLE") == 1)
			{
				int gorequantity;
				gorequantity = random(8, 16);
				
				for (int i = 0; i < gorequantity; i++)
					A_SpawnItemEx("GenericGib",
						FRandom((-radius), radius), FRandom((-radius), radius), frandom(height/3, height),
						frandom(2,4), frandom(2,4), frandom(4,8),
						frandom(0, 360), SXF_USEBLOODCOLOR | SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION);
				
				for (int i = 0; i < gorequantity; i++)
					A_SpawnItemEx("TinyGenericGib",
						FRandom((-radius), radius), FRandom((-radius), radius), frandom(height/3, height),
						frandom(2,4), frandom(2,4), frandom(4,8),
						frandom(0, 360), SXF_USEBLOODCOLOR | SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION);

				for (int i = 0; i < gorequantity; i++)
				{
					A_SpawnItemEx("Equestria_TinyBlood",
						frandom((-radius), radius),frandom((-radius), radius),frandom(height/3, height),
						frandom(0, 4),frandom(0, 4),frandom(0, 8),frandom(0,360),
						SXF_USEBLOODCOLOR | SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION);
					
					A_SpawnItemEx("Equestria_SmallBlood",
						frandom((-radius), radius),frandom((-radius), radius),frandom(height/3, height),
						frandom(0, 4),frandom(0, 4),frandom(0, 8),frandom(0,360),
						SXF_USEBLOODCOLOR | SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION);
					
					A_SpawnItemEx("Equestria_Blood",
						frandom((-radius), radius),frandom((-radius), radius),frandom(height/3, height),
						frandom(1, 2),frandom(1, 2),frandom(0, 8),frandom(0,360),
						SXF_USEBLOODCOLOR | SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION);
				}
			}
		}
		PLAY P 5;
		PLAY Q 5;
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
		
	Death.BruisersMelee:
		PLAY O 5 A_SkullPop("PopSkull");
		PLAY P 5 A_XScream();
		PLAY R 5 A_NoBlocking();
		PLAY STUV 5;
		PLAY W -1;
		Stop;
	}
}

Class PopSkull : PlayerChunk
{
	Default
	{
		+MISSILE;
	
		Height 8; Radius 4;

		+ForceXYBillBoard
	
		+UseBounceState +BounceOnFloors +BounceOnActors +BounceOnWalls
		BounceType "Doom";
	
		Gravity 0.25;
	
		+NOSKIN
		-SOLID
		-SHOOTABLE
		-PICKUP
		-NOTDMATCH
		-FRIENDLY
		-SLIDESONWALLS
		-CANPUSHWALLS
		-WINDTHRUST
		-TELESTOMP
	}
	
	double goodangle;
	
	States
	{
	Bounce.Floor:
		#### # 0 { angle = goodangle; }
	Spawn:
		PHED AAAAAAA 1 { goodangle = angle; A_SetRoll(roll + 4, SPF_INTERPOLATE); }
		PHED A 1 
		{
			A_SpawnItemEx("Equestria_SmallBlood",FRandom(-4, 4),FRandom(-4, 4),FRandom(-4, 4), random(1, 2), random(1, 2),random(-2,2),frandom(0,360), SXF_USEBLOODCOLOR);
			A_SetRoll(roll + 6, SPF_INTERPOLATE);
			goodangle = angle;
		}
		loop;

	Death:
		#### # -1 A_CheckPlayerDone();
		Wait;
	}
}

Class EquestriaMarine : EquestriaDoomPlayer
{
	Default
	{
		Player.DisplayName "Marine";
		Player.Portrait	"P_MARINE";
		Player.StartItem "EquestriaPistol";
		Player.StartItem "Clip", 20;
	}
}