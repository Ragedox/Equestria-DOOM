Class GibsCore : DebrisCore
{
	Default
	{
		Decal "BloodSplat";
		BounceSound "gore/impact";
		//DeathSound "gore/impact";

		Height 4; Radius 2;
		
		Mass 60;
		Speed 10;
		Gravity 0.75;
	  
		+USEBOUNCESTATE +BOUNCEONWALLS +BOUNCEONFLOORS +BOUNCEONACTORS
		BounceType "Doom";
		BounceFactor 0.25;
		
		-COUNTKILL
		
		DebrisCore.RollSpeed 15;
	}
	States
	{
	Spawn2:
		#### # 0 A_JumpIf(GetCVar("GoreToggle")== 0, "Bye");
		#### # 0 { A_SetRoll(random(0,359)); bSPRITEFLIP = randompick(0, 1); }
		Goto Roll;
	
	Bounce:
		#### # 0  A_SetRoll(roll + random(-100, 100));
	Roll:
		#### # 4 A_SpawnItem("BloodTrail");
		Loop;
	
	Death:
		#### # 350 A_JumpIf(GetCVar("GibsStayForever") == 0, "FadeOut");
		#### # 0; //A_JumpIf(GetCVar("GibsStayForever") == 2, "CheckSight");
		Loop;
		
	FadeOut:
		#### # 1 A_FadeOut(0.1);
		Wait;
	
	CheckSight:
		#### # 35 A_CheckSight("FadeOut");
		Loop;
	
	Bye: TNT1 A 0;
		Stop;
	}
}

Class EquestriaBlood : Blood replaces Blood
{
	Default
	{
		Decal "BloodSplat";
		Height 4; Radius 2;
		
		Gravity 0.75;
		Speed 8;
		
		+ForceXYBillBoard
		+DONTSPLASH
		+NOTELEPORT +NOBLOCKMAP
		+CORPSE
	}
	States
	{
	Spawn:
		BLUD CB 35;
		Wait;
	
	Death:
		BLUD BA 8;
		Stop;
		
	Crash:
		TNT1 A 0 { bSPRITEFLIP = randompick(0, 1); A_Stop();	}
		
		POB2 A random(4, 32);
		POB2 BCD 4 A_FadeOut(0.15);
		POB2 E 1 A_FadeOut(0.1);
		Wait;
	}
}

Class BloodTrail : EquestriaBlood
{
	Default
	{
		RenderStyle "Translucent";
		Alpha 0.75;
		
		Gravity 0.5;
		Scale 0.5;
	}
}

Class SmallBloodTrail : BloodTrail
{
	Default
	{
		Gravity 0.35;
		Scale 0.5;
	}
}

Class SmallBloodParticle : DEParticles
{
	Default
	{
		+BounceOnFloors;
		+ThruActors;
		-NoGravity;
		BounceType "Doom"; BounceFactor 0.25;
		Gravity 0.1;
		Speed 1;
		Scale 0.5;
		Height 2; Radius 1;
		
		RenderStyle "Translucent";
		Alpha 0.5;
	}
	States
	{
	Spawn:
		BLUD A 1;
		Loop;
	Death:
		BLUD A 1
		{
			A_SetScale((Scale.X - 0.01), (Scale.Y - 0.01), false);
			A_FadeOut(frandom(0.1, 0.2));
		}
		Wait;
	}
}

Class GibGore : GibsCore
{
	States
	{
	Spawn:
		GORE A 0 NoDelay A_Jump(256, 1,2,3);
		Wait;
		#### A 0;
		Goto Spawn2;
		#### B 0;
		Goto Spawn2;
		#### C 0;
		Goto Spawn2;
	}
}

Class GibGore1 : GibsCore
{
	States
	{
	Spawn:
		GORE A 0;
		Goto Spawn2;
	}
}

Class GibGore2 : GibsCore
{
	States
	{
	Spawn:
		GORE B 0;
		Goto Spawn2;
	}
}

Class GibGore3 : GibsCore
{
	States
	{
	Spawn:
		GORE C 0;
		Goto Spawn2;
	}
}

Class TinyGibGore1 : GibsCore
{
	Default
	{
		BounceSound "";
		Gravity 0.5;
		DebrisCore.RollSpeed 25;
	}
	States
	{
	Spawn:
		GORE D 0;
		Goto Spawn2;

	Roll:
		#### # 8 A_SpawnItem("SmallBloodTrail");
		Loop;
	}
		
	override void Tick()
	{
		if (InStateSequence(CurState, ResolveState("Roll")) && !isFrozen())
		{
			A_SetRoll((roll + rollspd), SPF_INTERPOLATE);
		}
		Super.Tick();
	}
}

Class TinyGibGore2 : TinyGibGore1
{
	States
	{
	Spawn:
		GORE E 0;
		Goto Spawn2;
	}
}

Class BigGoreRandom : RandomSpawner
{
	Default
	{
		DropItem "BigGibGore1";
		DropItem "BigGibGore2";
	}
}

Class BigGibGore1 : DebrisCore
{
	Default
	{
		Height 10;
		Radius 5;
		
		Speed 15;
		Mass 10;
		BounceFactor 0.5;
		
		DebrisCore.RollSpeed 25;
	}
	States
	{
	Spawn:
		BGOR A 0;
		Goto Spawn2;
	
	Spawn2:
		#### # 0 A_JumpIf(GetCVar("GoreToggle")== 0, "Bye");
		#### # 0 { A_SetRoll(random(0,359)); bSPRITEFLIP = randompick(0, 1); }
		Goto Roll;
		
	Bounce:
		#### # 0  A_SetRoll(roll + random(-100, 100));
	Roll:
		#### # 2 A_SpawnItemEx("BloodTrail", random(-10, 10), random(-10, 10), random(-10, 10));
		Loop;
		
	Death:
		BGOR B 0 A_SetRoll(0);
		BGOR B 350 A_JumpIf(GetCVar("GibsStayForever") == 0, "FadeOut");
		BGOR B 0; //A_JumpIf(GetCVar("GibsStayForever") == 2, "CheckSight");
		Loop;
		
	FadeOut:
		#### # 1 A_FadeOut(0.1);
		Wait;
	
	CheckSight:
		#### # 35 A_CheckSight("FadeOut");
		Loop;
	
	Bye: TNT1 A 0;
		Stop;
	}
}

Class BigGibGore2 : BigGibGore1
{
	States
	{
	Spawn:
		BGO2 A 0;
		Goto Spawn2;
	
	Death:
		BGO2 B 0 A_SetRoll(0);
		BGO2 B 350 A_JumpIf(GetCVar("GibsStayForever") == 0, "FadeOut");
		BGO2 B 0; //A_JumpIf(GetCVar("GibsStayForever") == 2, "CheckSight");
		Loop;
	}
}
Class XDeathGibber : Actor
{
	Default
	{
		Radius 20; Height 56;
		Mass 1;
		
		+NOCLIP
		+NOBLOCKMAP
		+NOTELEPORT
		+MOVEWITHSECTOR
		+NOGRAVITY
		+THRUACTORS
		+DONTSPLASH
	}
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(GetCvar("GoreToggle") == 0, "Bye");
		
		TNT1 AAA 0 A_SpawnProjectile("GibGore1", random(8, 32), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		TNT1 BBB 0 A_SpawnProjectile("GibGore2", random(8, 32), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		TNT1 CCC 0 A_SpawnProjectile("GibGore3", random(8, 32), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		TNT1 DDDDD 0 A_SpawnProjectile("TinyGibGore1", random(8, 32), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		TNT1 EEEEE 0 A_SpawnProjectile("TinyGibGore2", random(8, 32), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		Stop;
		
	Bye: TNT1 A 0;
	Stop;
	}
}

Class BigGibber : XDeathGibber
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(GetCvar("GoreToggle")== 0, "Bye");
		
		TNT1 AAAAA 0 A_SpawnProjectile("BigGoreRandom", random(0, 8), 0, random (0, 359), CMF_AIMDIRECTION, random (0, 359));
		Stop;
	}
}

Class BloodExplosion : XDeathGibber
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(GetCVar("GoreToggle")== 0, "Bye");
		
		TNT1 AAAAA 0 A_SpawnProjectile("BloodTrail", random(0, 8), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		TNT1 BBBBBB 0 A_SpawnProjectile("SmallBloodTrail", random(0, 8), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		TNT1 CCCC 0 A_SpawnProjectile("EquestriaBlood", random(0, 8), 0, random (0, 359), CMF_AIMDIRECTION, random (0, -180));
		Stop;
	}
}


Class BloodExplosionSphere : BloodExplosion
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(GetCVar("GoreToggle") == 0, "Bye");

		TNT1 AAAAA 0 A_SpawnProjectile("BloodTrail", random(0, 8), 0, random (0, 359), CMF_AIMDIRECTION, random (0, 359));
		TNT1 BBBBBB 0 A_SpawnProjectile("SmallBloodTrail", random(0, 8), 0, random (0, 359), CMF_AIMDIRECTION, random (0, 359));
		TNT1 CCCC 0 A_SpawnProjectile("EquestriaBlood", random(0, 8), 0, random (0, 359), CMF_AIMDIRECTION, random (0, 359));
		Stop;
	}
}