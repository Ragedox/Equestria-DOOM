//i prefer SBARINFO...

class EquestriaStatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;
	
	DynamicValueInterpolator mHealthInterpolator;
	DynamicValueInterpolator mArmorInterpolator;
	DynamicValueInterpolator mAmmoInterpolator;
	
	override void Init()
	{
		Super.Init();
		SetSize(31, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_DOOM";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();
		
		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
		mArmorInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
		mAmmoInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 64);
	}

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);

		if (state == HUD_StatusBar)
		{
			BeginStatusBar();
			DrawMainBar (TicFrac);
		}
		else if (state == HUD_Fullscreen)
		{
			BeginHUD();
			DrawFullScreenStuff();
		}
	}
	
	override void NewGame()
	{
		Super.NewGame();
		mHealthInterpolator.Reset (0);
		mArmorInterpolator.Reset (0);
		mAmmoInterpolator.Reset(0);
	}
	
	override void Tick()
	{
		// Run the parent status bar's Tick() function
        Super.Tick();

        // Update the value of the interpolators
        //	void Update(int destvalue)
        //	Parameter: Desired end-state value of the interpolator
        //   This is what sets the interpolator's value.  It uses the min/max step size variables that we created 
        //   interpolator with in Init(), so must be called repeatedly to set the correct value (so, if we start
        //   at 0, and Update to 100, and max step size is 8, each Update call will increment the value up by 8
        //   until the value reaches 100...  8, 16, 24, 32, ... 96, 100)
        mHealthInterpolator.Update(CPlayer.health); // Set the interpolator's value to this player's health
		mArmorInterpolator.Update(GetArmorAmount());
		
		Ammo ammo1, ammo2;
		int ammomax;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		mAmmoInterpolator.Update(ammocount1);
	}
	
	protected void DrawMainBar (double TicFrac)
	{
		CVar SBARSTYLE = CVar.FindCVar("CV_SBARSTYLE");
		
		if (SBARSTYLE)
		{
			Inventory a1 = GetCurrentAmmo();
			
			switch(SBARSTYLE.GetInt())
			{
				default:
					case 0: //EQUESTRIA DOOM HUD WIP, Needs power up timer and Full screen keys at the top of the screen
						DrawImage("STBARA", (0, 168), DI_ITEM_OFFSETS);
						
						int healthcolor =
							CPlayer.health >= 125 ? Font.CR_LIGHTBLUE : //Player has 125 or more health? Yes, then display Light Blue
							CPlayer.health > 50 && CPlayer.health < 125 ? Font.CR_WHITE :
							CPlayer.health > 25 && CPlayer.health <= 50 ? Font.CR_BRICK :
							Font.CR_UNTRANSLATED;
			
						int armorcolor =
							GetArmorAmount() >= 125 ? Font.CR_GREEN :
							GetArmorAmount() > 50 && GetArmorAmount() < 125 ? Font.CR_WHITE :
							GetArmorAmount() > 25 && GetArmorAmount() <= 50 ? Font.CR_OLIVE :
							Font.CR_DARKGRAY;
						
						int killcolor =
							Level.killed_monsters == Level.total_monsters ? Font.CR_UNTRANSLATED : //If you killed all monsters, turn the numbers into gold!
							Font.CR_WHITE;
							
						int secretcolor =
							Level.found_secrets == Level.total_secrets ? Font.CR_UNTRANSLATED :
							Font.CR_WHITE;
						
						if (CheckInventory("PowerStrength")) //Berserk
							DrawImage("BSERKBAR", (160, 198), DI_ITEM_OFFSETS);
						
						string sBloodbar =
							CPlayer.health > 25 && CPlayer.health <= 50 ? "BLODBARA" :
										CPlayer.health > 0 && CPlayer.health <= 25 ? "BLODBARB" :
										CPlayer.health <= 0 ? "BLODBARC" :
										"TNT1A0";
										
						DrawImage(sBloodbar, (0, 168), DI_ITEM_OFFSETS);

						DrawString(mHUDFont, FormatNumber(mHealthInterpolator.GetValue()), (135, 173), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, healthcolor);	
						DrawString(mHUDFont, FormatNumber(mArmorInterpolator.GetValue()), (76, 173), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, armorcolor);
						
						DrawBarKeys();
						DrawBarAmmo();
						DrawBarWeapons();
						
						DrawString(mIndexFont, FormatNumber(Level.killed_monsters), (24, 190), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, killcolor);
						DrawString(mIndexFont, FormatNumber(Level.found_secrets), (24, 173), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, secretcolor);
						
						if(!CheckInventory("PowerInvisibility"))
							DrawTexture(GetMugShot(5, MugShot.STANDARD | MugShot.XDEATHFACE | MugShot.ANIMATEDGODMODE | MugShot.CUSTOM), (160, 198), DI_ITEM_OFFSETS);
						else
							DrawImage("STBLUR01", (160, 198), DI_ITEM_OFFSETS);
						
						int itemTimeLeft, itemDuration;
						
						if (CheckInventory("PowerInvisibility", 1))
						{
							[itemTimeLeft,itemDuration] = CPlayer.mo.GetEffectTicsForItem("EquestriaBlurSphere");
		
							DrawBar("PINSA0", "SPHREBAR", itemTimeLeft, itemDuration, (301, 197), 1, SHADER_VERT);
						}
						if (CheckInventory("PowerInvulnerable", 1))
						{
							[itemTimeLeft,itemDuration] = CPlayer.mo.GetEffectTicsForItem("EquestriaInvulSphere");
		
							DrawBar("PINVA0", "SPHREBAR", itemTimeLeft, itemDuration, (301, 197), 1, SHADER_VERT);
						}
						break;
						
					case 1: //ORIGINAL DOOM HUD
						DrawImage("STBARB", (0, 168), DI_ITEM_OFFSETS);
						
						DrawImage("STTPRCNT", (90, 171), DI_ITEM_OFFSETS);
						DrawImage("STTPRCNT", (221, 171), DI_ITEM_OFFSETS);
						
						if (a1 != null) DrawString(mHUDFont, FormatNumber(a1.Amount, 3), (45, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
						DrawString(mHUDFont, FormatNumber(CPlayer.health, 3), (90, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
						DrawString(mHUDFont, FormatNumber(GetArmorAmount(), 3), (221, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);

						DrawBarKeys();
						DrawBarAmmo();
						
						if (deathmatch || teamplay)
							DrawString(mHUDFont, FormatNumber(CPlayer.FragCount, 3), (138, 171), DI_TEXT_ALIGN_RIGHT);
						else
							DrawBarWeapons();
						
						if (multiplayer)
							DrawImage("STFBANY", (143, 168), DI_ITEM_OFFSETS|DI_TRANSLATABLE);
						
						if (CPlayer.mo.InvSel != null && !Level.NoInventoryBar)
						{
							DrawInventoryIcon(CPlayer.mo.InvSel, (160, 198), DI_DIMDEPLETED);
							
							if (CPlayer.mo.InvSel.Amount > 1)
								DrawString(mAmountFont, FormatNumber(CPlayer.mo.InvSel.Amount), (175, 198-mIndexFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
						}
						else
							DrawTexture(GetMugShot(5, MugShot.STANDARD | MugShot.XDEATHFACE | MugShot.ANIMATEDGODMODE | MugShot.CUSTOM), (160, 198), DI_ITEM_OFFSETS);
						
						if (isInventoryBarVisible())
							DrawInventoryBar(diparms, (48, 169), 7, DI_ITEM_LEFT_TOP);						
						
						break;
						
					case 2: //WIP PLAYSTATION DOOM HUD WIP WIP WIP WIP WIP WIP WIP WIP
						DrawImage("STBARC", (-29, 168), DI_ITEM_OFFSETS);
						
						//DrawImage("STTPRCNT", (90, 171), DI_ITEM_OFFSETS);
						//DrawImage("STTPRCNT", (222, 171), DI_ITEM_OFFSETS);
						
						if (a1 != null) DrawString(mHUDFont, FormatNumber(a1.Amount, 3), (44, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
						DrawString(mHUDFont, FormatNumber(CPlayer.health, 3), (90, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
						DrawString(mHUDFont, FormatNumber(GetArmorAmount(), 3), (222, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);

						DrawBarKeys();
						DrawBarAmmo();
						
						if (deathmatch || teamplay)
							DrawString(mHUDFont, FormatNumber(CPlayer.FragCount, 3), (138, 171), DI_TEXT_ALIGN_RIGHT);
						else
							DrawBarWeapons();
						
						if (multiplayer)
							DrawImage("STFBANY", (143, 168), DI_ITEM_OFFSETS|DI_TRANSLATABLE);
						
						if (CPlayer.mo.InvSel != null && !Level.NoInventoryBar)
						{
							DrawInventoryIcon(CPlayer.mo.InvSel, (160, 198), DI_DIMDEPLETED);
							
							if (CPlayer.mo.InvSel.Amount > 1)
								DrawString(mAmountFont, FormatNumber(CPlayer.mo.InvSel.Amount), (175, 198-mIndexFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
						}
						else
							DrawTexture(GetMugShot(5, MugShot.STANDARD | MugShot.XDEATHFACE | MugShot.ANIMATEDGODMODE | MugShot.CUSTOM), (160, 198), DI_ITEM_OFFSETS);
						
						if (isInventoryBarVisible())
							DrawInventoryBar(diparms, (48, 169), 7, DI_ITEM_LEFT_TOP);
						
						break;
					}
			}
	}
	
	void DrawBarKeys()
	{
		CVar SBARSTYLE = CVar.FindCVar("CV_SBARSTYLE");
		
		if (SBARSTYLE)
		{
			switch(SBARSTYLE.GetInt())
			{
				bool locks[6];
				String image;
				
				default:
				case 0:
					for(int i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
					// key 1
					if (locks[1] && locks[4]) image = "STKEYS6";
					else if (locks[1]) image = "STKEYS0";
					else if (locks[4]) image = "STKEYS3";
					DrawImage(image, (181, 171), DI_ITEM_OFFSETS);
					// key 2
					if (locks[2] && locks[5]) image = "STKEYS7";
					else if (locks[2]) image = "STKEYS1";
					else if (locks[5]) image = "STKEYS4";
					else image = "";
					DrawImage(image, (181, 181), DI_ITEM_OFFSETS);
					// key 3
					if (locks[0] && locks[3]) image = "STKEYS8";
					else if (locks[0]) image = "STKEYS2";
					else if (locks[3]) image = "STKEYS5";
					else image = "";
					DrawImage(image, (181, 191), DI_ITEM_OFFSETS);
					break;
				
				case 1:
					for(int i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
					// key 1
					if (locks[1] && locks[4]) image = "STKEYS6";
					else if (locks[1]) image = "STKEYS0";
					else if (locks[4]) image = "STKEYS3";
					DrawImage(image, (239, 171), DI_ITEM_OFFSETS);
					// key 2
					if (locks[2] && locks[5]) image = "STKEYS7";
					else if (locks[2]) image = "STKEYS1";
					else if (locks[5]) image = "STKEYS4";
					else image = "";
					DrawImage(image, (239, 181), DI_ITEM_OFFSETS);
					// key 3
					if (locks[0] && locks[3]) image = "STKEYS8";
					else if (locks[0]) image = "STKEYS2";
					else if (locks[3]) image = "STKEYS5";
					else image = "";
					DrawImage(image, (239, 191), DI_ITEM_OFFSETS);
					break;
			}
		}
	}
	
	void DrawBarAmmo()
	{
		CVar SBARSTYLE = CVar.FindCVar("CV_SBARSTYLE");
		
		if (SBARSTYLE)
		{
			int amt1, maxamt, iAmmoAmountX, iMaxAmmoX;

			switch(SBARSTYLE.GetInt())
			{
			default:
				case 0:
					[amt1, maxamt] = GetAmount("Clip");
					if (!amt1 <= 0)
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 173), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "Clip"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
					else
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 173), DI_TEXT_ALIGN_RIGHT, Font.CR_BRICK);

						DrawString(mIndexFont, FormatNumber(maxamt, 3), (239, 173), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "Clip"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
							
					[amt1, maxamt] = GetAmount("Shell");
					if (!amt1 <= 0)
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 179), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "Shell"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
					else
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 179), DI_TEXT_ALIGN_RIGHT, Font.CR_BRICK);
							
						DrawString(mIndexFont, FormatNumber(maxamt, 3), (239, 179), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "Shell"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
					
					[amt1, maxamt] = GetAmount("RocketAmmo");
					if (!amt1 <= 0)
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 185), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "RocketAmmo"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
					else
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 185), DI_TEXT_ALIGN_RIGHT, Font.CR_BRICK);
						
						DrawString(mIndexFont, FormatNumber(maxamt, 3), (239, 185), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "RocketAmmo"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
						
					[amt1, maxamt] = GetAmount("Cell");
					if (!amt1 <= 0)
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 191), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "Cell"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
					else
						DrawString(mIndexFont, FormatNumber(amt1, 3), (217, 191), DI_TEXT_ALIGN_RIGHT, Font.CR_BRICK);
							
						DrawString(mIndexFont, FormatNumber(maxamt, 3), (239, 191), DI_TEXT_ALIGN_RIGHT,
							CPlayer.ReadyWeapon.Ammo1 is "Cell"? Font.CR_UNTRANSLATED : Font.CR_WHITE);
					
					break;
					
				case 1:
					[amt1, maxamt] = GetAmount("Clip");
					DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 173), DI_TEXT_ALIGN_RIGHT);
					DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 173), DI_TEXT_ALIGN_RIGHT);
					
					[amt1, maxamt] = GetAmount("Shell");
					DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 179), DI_TEXT_ALIGN_RIGHT);
					DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 179), DI_TEXT_ALIGN_RIGHT);
					
					[amt1, maxamt] = GetAmount("RocketAmmo");
					DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 185), DI_TEXT_ALIGN_RIGHT);
					DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 185), DI_TEXT_ALIGN_RIGHT);
					
					[amt1, maxamt] = GetAmount("Cell");
					DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 191), DI_TEXT_ALIGN_RIGHT);
					DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 191), DI_TEXT_ALIGN_RIGHT);
					
					break;
			}
		}
	}
	
	void DrawBarWeapons()
	{
		CVar SBARSTYLE = CVar.FindCVar("CV_SBARSTYLE");
		
		if (SBARSTYLE)
		{
			switch(SBARSTYLE.GetInt())
			{
				default:
					case 0: //EQUESTRIA DOOM HUD
						DrawImage(CPlayer.HasWeaponsInSlot(2)? "STYSNUM2" : "STGNUM2", (247, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(3)? "STYSNUM3" : "STGNUM3", (259, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(4)? "STYSNUM4" : "STGNUM4", (271, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(5)? "STYSNUM5" : "STGNUM5", (247, 182), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(6)? "STYSNUM6" : "STGNUM6", (259, 182), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(7)? "STYSNUM7" : "STGNUM7", (271, 182), DI_ITEM_OFFSETS);
						break;
					case 1: //ORIGINAL DOOM HUD
						DrawImage(CPlayer.HasWeaponsInSlot(2)? "STYSNUM2" : "STGNUM2", (111, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(3)? "STYSNUM3" : "STGNUM3", (123, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(4)? "STYSNUM4" : "STGNUM4", (135, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(5)? "STYSNUM5" : "STGNUM5", (111, 182), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(6)? "STYSNUM6" : "STGNUM6", (123, 182), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(7)? "STYSNUM7" : "STGNUM7", (135, 182), DI_ITEM_OFFSETS);
						break;
					case 2: //WIP PLAYSTATION DOOM HUD  WIP WIP WIP WIP WIP
						DrawImage(CPlayer.HasWeaponsInSlot(2)? "STYSNUM2" : "STGNUM2", (111, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(3)? "STYSNUM3" : "STGNUM3", (123, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(4)? "STYSNUM4" : "STGNUM4", (135, 172), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(5)? "STYSNUM5" : "STGNUM5", (111, 182), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(6)? "STYSNUM6" : "STGNUM6", (123, 182), DI_ITEM_OFFSETS);
						DrawImage(CPlayer.HasWeaponsInSlot(7)? "STYSNUM7" : "STGNUM7", (135, 182), DI_ITEM_OFFSETS);
						break;
			}
		}
	}
	
	void DrawFullScreenStuff()
	{
	if (!CheckInventory("HUDDisabled"))
	{
		if (CPlayer.health <= 25)
			DrawImage("BLODSCRN", (0,0));
							
		Vector2 iconbox = (40, 20);
		// Draw health
		let berserk = CPlayer.mo.FindInventory("PowerStrength");
		
		DrawImage(berserk? "STATUSC" : "STATUSA", (50, -32));
		
		int healthcolor =
			CPlayer.health >= 125 ? Font.CR_LIGHTBLUE :
			CPlayer.health > 50 && CPlayer.health < 125 ? Font.CR_WHITE :
			CPlayer.health > 25 && CPlayer.health <= 50 ? Font.CR_BRICK :
			Font.CR_UNTRANSLATED;
	
		int armorcolor =
			GetArmorAmount() >= 125 ? Font.CR_GREEN :
			GetArmorAmount() > 50 && GetArmorAmount() < 125 ? Font.CR_WHITE :
			GetArmorAmount() > 25 && GetArmorAmount() <= 50 ? Font.CR_OLIVE :
			Font.CR_DARKGRAY;

		DrawString(mHUDFont, FormatNumber(mHealthInterpolator.GetValue()), (112, -50), DI_TEXT_ALIGN_RIGHT, healthcolor);
							
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		if (armor != null && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (50, -54));
			
			DrawString(mHUDFont, FormatNumber(mArmorInterpolator.GetValue()), (112, -69), DI_TEXT_ALIGN_RIGHT, armorcolor);
		}
		
		Inventory ammotype1;
		ammotype1 = GetCurrentAmmo();
			
		if (CheckInventory("BackpackCheck"))
			DrawImage("BPAKA0", (-53, -34));
			
		if (ammotype1 != null)
		{
			DrawInventoryIcon(ammotype1, (-44, -34));
					
			if (CPlayer.ReadyWeapon.Ammo1 is "Clip")
			{
				int ammocolor =
					ammotype1.Amount > 50 ? Font.CR_WHITE :
					ammotype1.Amount > 25 && ammotype1.Amount <= 50 ? Font.CR_BRICK :
					Font.CR_RED;
						
				DrawString(mHUDFont, FormatNumber(mAmmoInterpolator.GetValue()), (-55, -50), DI_TEXT_ALIGN_RIGHT, ammocolor);
			}
			
			if (CPlayer.ReadyWeapon.Ammo1 is "Shell")
			{
				int ammocolor =
					ammotype1.Amount > 50 ? Font.CR_WHITE :
					ammotype1.Amount > 25 && ammotype1.Amount <= 50 ? Font.CR_BRICK :
					Font.CR_RED;

				DrawString(mHUDFont, FormatNumber(mAmmoInterpolator.GetValue()), (-55, -50), DI_TEXT_ALIGN_RIGHT, ammocolor);
			}
			
			if (CPlayer.ReadyWeapon.Ammo1 is "Cell")
			{
				int ammocolor =
					ammotype1.Amount > 100 ? Font.CR_WHITE :
					ammotype1.Amount > 50 && ammotype1.Amount <= 100 ? Font.CR_BRICK :
					Font.CR_RED;

				DrawString(mHUDFont, FormatNumber(mAmmoInterpolator.GetValue()), (-55, -50), DI_TEXT_ALIGN_RIGHT, ammocolor);
			}
			
			if (CPlayer.ReadyWeapon.Ammo1 is "RocketAmmo")
			{
				int ammocolor =
					ammotype1.Amount > 50 ? Font.CR_WHITE :
					ammotype1.Amount > 25 && ammotype1.Amount <= 50 ? Font.CR_BRICK :
					Font.CR_RED;	

				DrawString(mHUDFont, FormatNumber(mAmmoInterpolator.GetValue()), (-55, -50), DI_TEXT_ALIGN_RIGHT, ammocolor);
			}
		}
		
		DrawFullscreenKeys();
		DrawPowerUp();
		if (isInventoryBarVisible())
			DrawInventoryBar(diparms, (0, 0), 7, DI_SCREEN_CENTER_BOTTOM, HX_SHADOW);
			
	}}
	
	void DrawPowerUp()
	{
		int itemTimeLeft, itemDuration;
		
		if (CheckInventory("PowerInvisibility", 1))
		{
			[itemTimeLeft,itemDuration] = CPlayer.mo.GetEffectTicsForItem("EquestriaBlurSphere");
		
			DrawBar("PINSA0", "NOTHINGA", itemTimeLeft, itemDuration, (160, -34), 0, SHADER_VERT);
		}
		if (CheckInventory("PowerInvulnerable", 1))
		{
			[itemTimeLeft,itemDuration] = CPlayer.mo.GetEffectTicsForItem("EquestriaInvulSphere");

			DrawBar("PINVA0", "NOTHINGA", itemTimeLeft, itemDuration, (160, -34), 0, SHADER_VERT);
		}
	}
	
	void DrawFullscreenKeys()
	{
		// Draw the keys. This does not use a special draw function like SBARINFO because the specifics will be different for each mod
		// so it's easier to copy or reimplement the following piece of code instead of trying to write a complicated all-encompassing solution.
		Vector2 keypos = (-9, 40);
		int rowc = 0;
		double roww = 0;
		for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
		{
			if (i is "Key" && i.Icon.IsValid())
			{
				DrawTexture(i.Icon, keypos, DI_SCREEN_CENTER_TOP);
				Vector2 size = TexMan.GetScaledSize(i.Icon);
				keypos.X += size.X + 2; 
				roww = max(roww, size.y);
				if (++rowc == 3)
				{
					keypos.X = -9;
					keypos.Y -= rowc - 9;
					roww = 0;
					rowc = 0;
				}
			}
		}
	}
	
	/*void DrawFullKeys()
	{
		if (CheckInventory("EquestriaBlueCard", 1) && !CheckInventory("EquestriaRedCard", 1) && !CheckInventory("EquestriaYellowCard", 1))
			DrawImage("BKEYB0", (0,40), DI_SCREEN_CENTER_TOP);
		else if (!CheckInventory("EquestriaBlueCard", 1) && CheckInventory("EquestriaRedCard", 1) && !CheckInventory("EquestriaYellowCard", 1))
			DrawImage("RKEYB0", (0,40), DI_SCREEN_CENTER_TOP);
		else if (!CheckInventory("EquestriaBlueCard", 1) && !CheckInventory("EquestriaRedCard", 1) && CheckInventory("EquestriaYellowCard", 1))
			DrawImage("YKEYB0", (0,40), DI_SCREEN_CENTER_TOP);
			
		else if (CheckInventory("EquestriaBlueCard", 1) && CheckInventory("EquestriaRedCard", 1) && !CheckInventory("EquestriaYellowCard", 1))
		{	DrawImage("BKEYB0", (-10,40), DI_SCREEN_CENTER_TOP);
			DrawImage("RKEYB0", (10,40), DI_SCREEN_CENTER_TOP); }
		else if (CheckInventory("EquestriaBlueCard", 1) && !CheckInventory("EquestriaRedCard", 1) && CheckInventory("EquestriaYellowCard", 1))
		{	DrawImage("BKEYB0", (-10,40), DI_SCREEN_CENTER_TOP);
			DrawImage("YKEYB0", (10,40), DI_SCREEN_CENTER_TOP); }
		else if (!CheckInventory("EquestriaBlueCard", 1) && CheckInventory("EquestriaRedCard", 1) && CheckInventory("EquestriaYellowCard", 1))
		{	DrawImage("YKEYB0", (-10,40), DI_SCREEN_CENTER_TOP);
			DrawImage("RKEYB0", (10,40), DI_SCREEN_CENTER_TOP); }
		else if (CheckInventory("EquestriaBlueCard", 1) && CheckInventory("EquestriaRedCard", 1) && CheckInventory("EquestriaYellowCard", 1))
		{	DrawImage("BKEYB0", (-20,40), DI_SCREEN_CENTER_TOP);
			DrawImage("RKEYB0", (0,40), DI_SCREEN_CENTER_TOP);
			DrawImage("YKEYB0", (20,40), DI_SCREEN_CENTER_TOP); }
			
		else if (CheckInventory("EquestriaBlueSkull", 1) && !CheckInventory("EquestriaRedSkull", 1) && !CheckInventory("EquestriaYellowSkull", 1))
			DrawImage("BKEYB0", (0,40), DI_SCREEN_CENTER_TOP);
		else if (!CheckInventory("EquestriaBlueSkull", 1) && CheckInventory("EquestriaRedSkull", 1) && !CheckInventory("EquestriaYellowSkull", 1))
			DrawImage("RKEYB0", (0,40), DI_SCREEN_CENTER_TOP);
		else if (!CheckInventory("EquestriaBlueSkull", 1) && !CheckInventory("EquestriaRedSkull", 1) && CheckInventory("EquestriaYellowSkull", 1))
			DrawImage("YKEYB0", (0,40), DI_SCREEN_CENTER_TOP);
	}*/
}